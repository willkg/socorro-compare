# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import datetime
from itertools import zip_longest

import pytest


def build_map(adi_data):
   """Build a map of (date, channel, version) -> item"""
   return dict([
       ((item['date'], item['build_type'], item['version']), item)
       for item in adi_data
   ])


@pytest.mark.parametrize('product, platform', [
    ('Firefox', 'Mac OS X'),
    ('Firefox', 'Linux'),
    ('Firefox', 'Windows'),
    ('Firefox', 'Unknown'),
    ('FennecAndroid', 'Linux')
])
def test_adi(helper, product, platform):
    """Compare ADI data between two environments for a product/platform

    Compare ADI data for product/platform combinations between the two
    environments for the last 7 days. It should be the same.

    ADI is generated by a bunch of crontabber jobs. This tests that the ADI
    flow between two environments is the same.

    """
    host_1 = helper.env1['host']
    host_2 = helper.env2['host']

    TODAY = datetime.datetime.utcnow()
    LAST_WEEK = TODAY - datetime.timedelta(days=7)

    TODAY = TODAY.strftime('%Y-%m-%d')
    LAST_WEEK = LAST_WEEK.strftime('%Y-%m-%d')

    # Get the active versions from host 2
    versions = [
        item['version'] for item in
        helper.fetch_json(host_2, '/api/ProductVersions', params={
            'product': product,
            'active': 'true',
            'is_featured': 'true',
        })['hits']
    ]

    print('/api/ADI -> %s (%s)' % (product, versions))

    url = '/api/ADI'
    params = {
        'start_date': LAST_WEEK,
        'end_date': TODAY,
        'product': product,
        'platforms': platform,
        'versions': versions
    }

    # Fetch adi data from host 1
    adi_1 = helper.fetch_json(host_1, url, params=params)['hits']
    adi_1_map = build_map(adi_1)

    # Fetch adi data from host 2
    adi_2 = helper.fetch_json(host_2, url, params=params)['hits']
    adi_2_map = build_map(adi_2)

    errors = 0

    # Compare host 1 -> host 2
    for key in adi_1_map.keys():
        item_1 = adi_1_map.get(key, {})
        item_2 = adi_2_map.get(key, {})

        if item_1 != item_2:
            helper.print_compare(item_1, item_2)
            errors += 1

    # Compare host 1 <- host 2
    for key in adi_2_map.keys():
        item_1 = adi_1_map.get(key, {})
        item_2 = adi_2_map.get(key, {})

        if item_1 != item_2:
            helper.print_compare(item_1, item_2)
            errors += 1

    total = len(adi_1) + len(adi_2)
    print('%s, %s: total %s, errors %s' % (product, platform, total, errors))
    assert errors == 0
